<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Conversion Quest</title>
    <script src="https://cdn.jsdelivr.net/npm/phaser@3.55.2/dist/phaser.min.js"></script>
    <style>
        /* CSS for styling */
        body {
            margin: 0;
            padding: 0;
            display: flex;
            justify-content: center;
            align-items: center;
            height: 100vh;
            background-color: #f0f0f0;
        }
        canvas {
            border: 2px solid #ccc;
            border-radius: 10px;
        }
    </style>
</head>
<body>
    <script>
        // JavaScript for the game
        var config = {
            type: Phaser.AUTO,
            width: 800,
            height: 600,
            physics: {
                default: 'arcade',
                arcade: {
                    gravity: { y: 200 }
                }
            },
            scene: {
                preload: preload,
                create: create,
                update: update
            }
        };

        var game = new Phaser.Game(config);

        function preload() {
            // Preload assets like images and sprites
            this.load.image('background', 'background.jpg');
            this.load.image('player', 'player.png');
            this.load.image('kilometers', 'kilometers.png');
            this.load.image('meters', 'meters.png');
        }

        function create() {
            // Create the game elements
            this.add.image(400, 300, 'background');

            this.player = this.physics.add.image(100, 450, 'player').setScale(0.5);

            this.kilometers = this.physics.add.image(400, 300, 'kilometers').setScale(0.5);
            this.kilometers.setInteractive();
            this.input.setDraggable(this.kilometers);

            this.meters = this.add.image(700, 300, 'meters').setScale(0.5);
            this.meters.setInteractive();
            this.input.setDraggable(this.meters);

            this.input.on('dragstart', function (pointer, gameObject) {
                gameObject.setTint(0xff0000);
            });

            this.input.on('dragend', function (pointer, gameObject) {
                gameObject.clearTint();
            });

            this.input.on('drop', function (pointer, gameObject, dropZone) {
                gameObject.x = dropZone.x;
                gameObject.y = dropZone.y;
                gameObject.input.enabled = false;
            });

            this.physics.add.overlap(this.kilometers, this.meters, function () {
                // Player successfully converts kilometers to meters
                console.log('Conversion complete!');
            }, null, this);
        }

        function update() {
            // Game loop
        }
    </script>
</body>
</html>
